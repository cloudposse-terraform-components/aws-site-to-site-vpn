name: "aws-site-to-site-vpn"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-site-to-site-vpn"
# Short description of this project
description: |-
  This component provisions a [Site-To-Site VPN](https://aws.amazon.com/vpn/site-to-site-vpn/) with a target AWS VPC on
  one side of the tunnel. The other (customer) side can be any VPN gateway endpoint, e.g. a hardware device, other cloud
  VPN, etc.

  AWS Site-to-Site VPN is a fully-managed service that creates a secure connection between your data center or branch
  office and your AWS resources using IP Security (IPSec) tunnels. When using Site-to-Site VPN, you can connect to both
  your Amazon Virtual Private Clouds (VPC) and AWS Transit Gateway, and two tunnels per connection are used for increased
  redundancy.

  The component provisions the following resources:

  - AWS Virtual Private Gateway (a representation of the AWS side of the tunnel)

  - AWS Customer Gateway (a representation of the other (remote) side of the tunnel). It requires:

    - The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN)
    - `/32` IP of the VPN endpoint

  - AWS Site-To-Site VPN connection. It creates two VPN tunnels for redundancy and requires:

    - The IP CIDR ranges on each side of the tunnel
    - Pre-shared Keys for each tunnel (can be auto-generated if not provided and saved into SSM Parameter Store)
    - (Optional) IP CIDR ranges to be used inside each VPN tunnel

  - Route table entries to direct the appropriate traffic from the local VPC to the other side of the tunnel
usage: |-
  Stack Level: Regional

  Example configuration:

  ```yaml
  components:
    terraform:
      site-to-site-vpn:
        metadata:
          component: site-to-site-vpn
        vars:
          enabled: true
          name: "site-to-site-vpn"
          vpc_component_name: vpc
          customer_gateway_bgp_asn: 65000
          customer_gateway_ip_address: 20.200.30.0
          vpn_gateway_amazon_side_asn: 64512
          vpn_connection_static_routes_only: true
          vpn_connection_tunnel1_inside_cidr: 169.254.20.0/30
          vpn_connection_tunnel2_inside_cidr: 169.254.21.0/30
          vpn_connection_local_ipv4_network_cidr: 10.100.128.0/24
          vpn_connection_remote_ipv4_network_cidr: 10.10.80.0/24
          vpn_connection_static_routes_destinations:
            - 10.100.128.0/24
          vpn_connection_tunnel1_startup_action: add
          vpn_connection_tunnel2_startup_action: add
          transit_gateway_enabled: false
          vpn_connection_tunnel1_cloudwatch_log_enabled: false
          vpn_connection_tunnel2_cloudwatch_log_enabled: false
          preshared_key_enabled: true
          ssm_enabled: true
          ssm_path_prefix: "/site-to-site-vpn"
  ```

  Provisioning:

  ```sh
  atmos terraform plan site-to-site-vpn -s <stack>
  atmos terraform apply site-to-site-vpn -s <stack>
  ```

  Post-tunnel creation requirements:

  Once the site-to-site VPN resources are deployed, send the VPN configuration from the AWS side to the
  administrator of the remote side of the VPN connection. To do this:

  1. Determine the infrastructure that will be used for the remote side, specifically vendor, platform, software version, and IKE version.
  2. Log into the target AWS account and open the VPC console.
  3. Navigate to `Virtual Private Network` > `Site-to-Site VPN Connections`.
  4. Select the VPN connection that was created via this component.
  5. Click `Download Configuration` (top right).
  6. Enter the information you obtained and click `Download`.
  7. Send the configuration file to the administrator of the remote side of the tunnel.

  Amazon side Autonomous System Number (ASN):

  The variable `vpn_gateway_amazon_side_asn` (Amazon side ASN) is not strictly required when creating an AWS VPN Gateway.
  If you do not specify it during creation, AWS will automatically assign a default ASN (7224 for the Amazon side).

  Specifying the Amazon side ASN can be important if you integrate the VPN with an on-premises network that uses BGP and
  you want to avoid ASN conflicts or require a specific ASN for routing policies. If your use case involves BGP peering
  and you need a specific ASN for the Amazon side, explicitly set `vpn_gateway_amazon_side_asn`. Otherwise, it can be
  omitted (set to `null`) and AWS will handle it automatically.
references:
  - name: "AWS Site-to-Site VPN"
    description: ""
    url: "https://aws.amazon.com/vpn/site-to-site-vpn"
  - name: "AWS Docs: Site-to-Site VPN"
    description: ""
    url: "https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html"
  - name: "AWS EC2 API: VpnTunnelOptionsSpecification"
    description: ""
    url: "https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html"
  - name: "cloudposse/terraform-aws-components: site-to-site-vpn"
    description: "Cloud Posse's upstream component"
    url: "https://github.com/cloudposse/terraform-aws-components/tree/main/modules/site-to-site-vpn"
tags:
  - component/site-to-site-vpn
  - layer/network
  - provider/aws
# Categories of this project
categories:
  - component/site-to-site-vpn
  - layer/network
  - provider/aws
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-site-to-site-vpn.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-site-to-site-vpn/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
